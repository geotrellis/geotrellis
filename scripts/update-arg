#!/usr/bin/env python

import array
from lxml import etree
import json
import os
import sys

def convert_old_xml(path):
    tree = etree.parse(path)
    name = os.path.basename(os.path.splitext(path)[0])
    d = {
        'layer': name,
        'type': 'arg',
        'datatype': 'int8',
        'cellwidth': float(grab(tree, '/METADATA/CELLWIDTH/@value')),
        'cellheight': float(grab(tree, '/METADATA/CELLHEIGHT/@value')),
        'cols': int(grab(tree, '/METADATA/DIMENSIONS/@width')),
        'rows': int(grab(tree, '/METADATA/DIMENSIONS/@height')),
        'xmin': float(grab(tree, '/METADATA/ORIGIN/@xMin')),
        'ymin': float(grab(tree, '/METADATA/ORIGIN/@yMin')),
    }
    d['xmax'] = d['xmin'] + (d['cellwidth'] * d['cols'])
    d['ymax'] = d['ymin'] + (d['cellheight'] * d['rows'])
    return d

def grab(tree, xpath, default=None):
    results = tree.xpath(xpath)
    if results:
        return results[0]
    elif default is None:
        raise Exception("couldn't find %r" % xpath)
    else:
        return default

def convert_old_json(path):
    d = json.load(open(path, 'r'))
    name = os.path.basename(os.path.splitext(path)[0])
    d['type'] = 'arg'
    d['datatype'] = 'int32'
    return d

def check_json(d):
    required = ['layer', 'type', 'datatype', 'cellwidth', 'cellheight',
                'cols', 'rows', 'xmin', 'ymin', 'xmax', 'ymax']
    missing = []
    for name in required:
        if name not in d: missing.append(name)

    if missing:
        raise Exception("missing required names: %s" % ", ".join(missing))

def subext(path, ext):
    return os.path.splitext(path)[0] + "." + ext

def mkarray(code):
    a = array.array(code)
    if sys.byteorder == 'little': a.byteswap()
    return a

def flip_arg(path, cols, rows):
    a = mkarray('b')
    f = open(path, 'r')
    a.fromfile(f, cols * rows)
    
    a2 = mkarray('b')
    for y in range(0, rows):
        span = (rows - y - 1) * cols
        for x in range(0, cols):
            z = a[span + x]
            # map old no-data to new
            if (z == 0): z = -128
            a2.append(z)

    f2 = open(path, 'w')
    a2.tofile(f2)

def flip_arg32(path, cols, rows):
    a = mkarray('i')
    f = open(path, 'r')
    a.fromfile(f, cols * rows)
    
    a2 = mkarray('i')
    for y in range(0, rows):
        span = (rows - y - 1) * cols
        for x in range(0, cols):
            z = a[span + x]
            a2.append(z)

    f2 = open(path, 'w')
    a2.tofile(f2)

def write_json(d, path):
    f = open(path, 'w')
    json.dump(d, f, sort_keys=True, indent=2)

if __name__ == "__main__":
    for path in sys.argv[1:]:
        jsonpath = subext(path, 'json')

        raw = open(path, 'r').read()

        if path.endswith('arg32'):
            d = convert_old_json(jsonpath)
            flip_arg32(path, d['cols'], d['rows'])
            write_json(d, jsonpath)
            
        elif path.endswith('arg'):
            d = convert_old_xml(subext(path, 'xml'))
            flip_arg(path, d['cols'], d['rows'])
            write_json(d, jsonpath)

        else:
            print "unknown format: %s" % path

        print "updated %s" % path
