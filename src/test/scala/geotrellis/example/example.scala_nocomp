package geotrellis.example

import geotrellis._

import geotrellis.process._

import org.scalatest.Spec
import org.scalatest.matchers.MustMatchers

// compare this to some DT output:
//
// http://sample.avencia.com:8080/dt_sbn/api/calculations/WeightedOverlay.png?
//   renderer=quantile_color&
//   colors=0.17,0000FF,0.34,0080FF,0.50,00FF80,0.67,FFFF00,0.84,FF8000,1.0,FF0000&
//   width=2400&
//   height=2400&
//   mask=SBN_co_phila&
//   bbox=-8479445.729865288,-8310842.787582668,4808260.443229382,4964022.161249949&
//   df=SBN_farm_mkt,2,SBN_RR_stops_walk,1,SBN_inc_percap,5,SBN_street_den_1k,2

case class Timer[T](f:() => T) {
  val t0 = System.currentTimeMillis()
  val result = f()
  val t1 = System.currentTimeMillis()
  val time = t1 - t0
}

@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner])
class ExampleSpec extends Spec with MustMatchers {
  describe("A Trellis") {
    // inputs and constants
    val weights = Array(2, 1, 5, 2)
    val paths = Array("SBN_farm_mkt", "SBN_RR_stops_walk", "SBN_inc_percap",
                      "SBN_street_den_1k").map { "src/test/resources/sbn/" + _ }

    val height = 600
    val width  = 600

    val maskpath    = "src/test/resources/sbn/SBN_co_phila"
    val colors      = Array(0x0000FF, 0x0080FF, 0x00FF80, 0xFFFF00, 0xFF8000, 0xFF0000)
    val noDataColor = 0x000000

    // pre-process the total weights
    val weightsum:Int = weights.foldLeft(0.toInt) { (a, b) => (a + b).toInt }

    val server = TestServer.server
    it("should work") {

      val geo = server.run(LoadRasterExtentFromFile(paths(0)))
   
      val reqGeo = BuildRasterExtent2(Literal(geo.extent), Literal(width), Literal(height))
      // load the files
      var Rs:Seq[Op[Raster]] = paths.map {
        path => LoadFile(path, reqGeo)
      }
      
      // associate the rasters with their weights
      val Tpls = Rs.zip { weights }
      
      // multiply each raster point by its weight
      Rs = Tpls.map { tpl => MultiplyConstant(tpl._1, tpl._2) }
      
      // average: add the rasters then divide by the sum of the weights
      val W = DivideConstant(Add(Rs: _*), weightsum)
    
      // load the mask file
      val M = LoadFile(maskpath, reqGeo)
      
      // apply the mask
      val T = if (false) { Mask(W, M, 0, 0) } else { W }
      
      // normalize the result for 1-100
      val I = Cache(Normalize(T, 1, 100))
    
      // create a histogram for color breaks
      val H = BuildArrayHistogram(I, 101)
    
      // create colorized quantile breaks
      val C = FindClassBreaks(H, colors.length)

      // ACTUAL EXECUTION STARTS HERE
      val t0 = System.currentTimeMillis()
    
      val classBreaks = server.run(C)
      C.logTimingTree
      val colorBreaks = classBreaks.zip(colors).toArray
      val t1 = System.currentTimeMillis();
      Console.printf("color breaks: %d ms\n", t1 - t0)
      
      // render a PNG file using quantile class breaks
      val P = RenderPNG(I, colorBreaks, noDataColor, true)
      val data = server.run(P)
      
      val t2 = System.currentTimeMillis();
      Console.printf("wrote png(%d bytes): %d ms\n", data.length, t2 - t1)
    
      val tN = System.currentTimeMillis()
      Console.printf("finished in %d ms\n", tN - t0)
    }
  }
}

object ExampleSpec {
  def main(args: Array[String]) : Unit = {
    var spec = new ExampleSpec()
    spec.execute()
  }

}
