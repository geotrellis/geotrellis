/*
 * Copyright 2016 Azavea
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package geotrellis.vectortile.protobuf.internal.vector_tile

@SerialVersionUID(0L)
final case class Tile(
    layers: Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Tile] with com.trueaccord.lenses.Updatable[Tile] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      layers.foreach(layers => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(layers.serializedSize) + layers.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      layers.foreach { __v =>
        output.writeTag(3, 2)
        output.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): geotrellis.vectortile.protobuf.internal.vector_tile.Tile = {
      val __layers = (scala.collection.immutable.Vector.newBuilder[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer] ++= this.layers)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __layers += com.trueaccord.scalapb.LiteParser.readMessage(__input, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer.defaultInstance)
          case tag => __input.skipField(tag)
        }
      }
      geotrellis.vectortile.protobuf.internal.vector_tile.Tile(
          layers = __layers.result()
      )
    }
    def clearLayers = copy(layers = Seq.empty)
    def addLayers(__vs: geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer*): Tile = addAllLayers(__vs)
    def addAllLayers(__vs: TraversableOnce[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer]): Tile = copy(layers = layers ++ __vs)
    def withLayers(__v: Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer]): Tile = copy(layers = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 3 => layers
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = geotrellis.vectortile.protobuf.internal.vector_tile.Tile
}

object Tile extends com.trueaccord.scalapb.GeneratedMessageCompanion[geotrellis.vectortile.protobuf.internal.vector_tile.Tile] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[geotrellis.vectortile.protobuf.internal.vector_tile.Tile] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): geotrellis.vectortile.protobuf.internal.vector_tile.Tile = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    geotrellis.vectortile.protobuf.internal.vector_tile.Tile(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = VectorTileProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 3 => __out = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = geotrellis.vectortile.protobuf.internal.vector_tile.Tile(
  )
  sealed trait GeomType extends com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = GeomType
    def isUnknown: Boolean = false
    def isPoint: Boolean = false
    def isLinestring: Boolean = false
    def isPolygon: Boolean = false
    def isUnrecognized: Boolean = false
    def companion: com.trueaccord.scalapb.GeneratedEnumCompanion[GeomType] = GeomType
  }

  object GeomType extends com.trueaccord.scalapb.GeneratedEnumCompanion[GeomType] {
    implicit def enumCompanion: com.trueaccord.scalapb.GeneratedEnumCompanion[GeomType] = this
    @SerialVersionUID(0L)
    case object UNKNOWN extends GeomType {
      val value = 0
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: Boolean = true
    }

    @SerialVersionUID(0L)
    case object POINT extends GeomType {
      val value = 1
      val index = 1
      val name = "POINT"
      override def isPoint: Boolean = true
    }

    @SerialVersionUID(0L)
    case object LINESTRING extends GeomType {
      val value = 2
      val index = 2
      val name = "LINESTRING"
      override def isLinestring: Boolean = true
    }

    @SerialVersionUID(0L)
    case object POLYGON extends GeomType {
      val value = 3
      val index = 3
      val name = "POLYGON"
      override def isPolygon: Boolean = true
    }

    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends GeomType {
      val name = "UNRECOGNIZED"
      val index = -1
      override def isUnrecognized: Boolean = true
    }

    lazy val values = Seq(UNKNOWN, POINT, LINESTRING, POLYGON)
    def fromValue(value: Int): GeomType = value match {
      case 0 => UNKNOWN
      case 1 => POINT
      case 2 => LINESTRING
      case 3 => POLYGON
      case __other => Unrecognized(__other)
    }
    def descriptor: com.google.protobuf.Descriptors.EnumDescriptor = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.descriptor.getEnumTypes.get(0)
  }
  @SerialVersionUID(0L)
  final case class Value(
      stringValue: scala.Option[String] = None,
      floatValue: scala.Option[Float] = None,
      doubleValue: scala.Option[Double] = None,
      intValue: scala.Option[Long] = None,
      uintValue: scala.Option[Long] = None,
      sintValue: scala.Option[Long] = None,
      boolValue: scala.Option[Boolean] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Value] with com.trueaccord.lenses.Updatable[Value] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (stringValue.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, stringValue.get) }
        if (floatValue.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeFloatSize(2, floatValue.get) }
        if (doubleValue.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeDoubleSize(3, doubleValue.get) }
        if (intValue.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeInt64Size(4, intValue.get) }
        if (uintValue.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeUInt64Size(5, uintValue.get) }
        if (sintValue.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeSInt64Size(6, sintValue.get) }
        if (boolValue.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeBoolSize(7, boolValue.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        stringValue.foreach { __v =>
          output.writeString(1, __v)
        };
        floatValue.foreach { __v =>
          output.writeFloat(2, __v)
        };
        doubleValue.foreach { __v =>
          output.writeDouble(3, __v)
        };
        intValue.foreach { __v =>
          output.writeInt64(4, __v)
        };
        uintValue.foreach { __v =>
          output.writeUInt64(5, __v)
        };
        sintValue.foreach { __v =>
          output.writeSInt64(6, __v)
        };
        boolValue.foreach { __v =>
          output.writeBool(7, __v)
        };
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value = {
        var __stringValue = this.stringValue
        var __floatValue = this.floatValue
        var __doubleValue = this.doubleValue
        var __intValue = this.intValue
        var __uintValue = this.uintValue
        var __sintValue = this.sintValue
        var __boolValue = this.boolValue
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __stringValue = Some(__input.readString())
            case 21 =>
              __floatValue = Some(__input.readFloat())
            case 25 =>
              __doubleValue = Some(__input.readDouble())
            case 32 =>
              __intValue = Some(__input.readInt64())
            case 40 =>
              __uintValue = Some(__input.readUInt64())
            case 48 =>
              __sintValue = Some(__input.readSInt64())
            case 56 =>
              __boolValue = Some(__input.readBool())
            case tag => __input.skipField(tag)
          }
        }
        geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value(
            stringValue = __stringValue,
            floatValue = __floatValue,
            doubleValue = __doubleValue,
            intValue = __intValue,
            uintValue = __uintValue,
            sintValue = __sintValue,
            boolValue = __boolValue
        )
      }
      def getStringValue: String = stringValue.getOrElse("")
      def clearStringValue: Value = copy(stringValue = None)
      def withStringValue(__v: String): Value = copy(stringValue = Some(__v))
      def getFloatValue: Float = floatValue.getOrElse(0.0f)
      def clearFloatValue: Value = copy(floatValue = None)
      def withFloatValue(__v: Float): Value = copy(floatValue = Some(__v))
      def getDoubleValue: Double = doubleValue.getOrElse(0.0)
      def clearDoubleValue: Value = copy(doubleValue = None)
      def withDoubleValue(__v: Double): Value = copy(doubleValue = Some(__v))
      def getIntValue: Long = intValue.getOrElse(0L)
      def clearIntValue: Value = copy(intValue = None)
      def withIntValue(__v: Long): Value = copy(intValue = Some(__v))
      def getUintValue: Long = uintValue.getOrElse(0L)
      def clearUintValue: Value = copy(uintValue = None)
      def withUintValue(__v: Long): Value = copy(uintValue = Some(__v))
      def getSintValue: Long = sintValue.getOrElse(0L)
      def clearSintValue: Value = copy(sintValue = None)
      def withSintValue(__v: Long): Value = copy(sintValue = Some(__v))
      def getBoolValue: Boolean = boolValue.getOrElse(false)
      def clearBoolValue: Value = copy(boolValue = None)
      def withBoolValue(__v: Boolean): Value = copy(boolValue = Some(__v))
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 1 => stringValue.getOrElse(null)
          case 2 => floatValue.getOrElse(null)
          case 3 => doubleValue.getOrElse(null)
          case 4 => intValue.getOrElse(null)
          case 5 => uintValue.getOrElse(null)
          case 6 => sintValue.getOrElse(null)
          case 7 => boolValue.getOrElse(null)
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value
  }

  object Value extends com.trueaccord.scalapb.GeneratedMessageCompanion[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value] = this
    def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Float]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Double]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Boolean]]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.descriptor.getNestedTypes.get(0)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value(
    )
    implicit class ValueLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value]) extends com.trueaccord.lenses.ObjectLens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value](_l) {
      def stringValue: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getStringValue)((c_, f_) => c_.copy(stringValue = Some(f_)))
      def optionalStringValue: com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.stringValue)((c_, f_) => c_.copy(stringValue = f_))
      def floatValue: com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.getFloatValue)((c_, f_) => c_.copy(floatValue = Some(f_)))
      def optionalFloatValue: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Float]] = field(_.floatValue)((c_, f_) => c_.copy(floatValue = f_))
      def doubleValue: com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getDoubleValue)((c_, f_) => c_.copy(doubleValue = Some(f_)))
      def optionalDoubleValue: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.doubleValue)((c_, f_) => c_.copy(doubleValue = f_))
      def intValue: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getIntValue)((c_, f_) => c_.copy(intValue = Some(f_)))
      def optionalIntValue: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.intValue)((c_, f_) => c_.copy(intValue = f_))
      def uintValue: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getUintValue)((c_, f_) => c_.copy(uintValue = Some(f_)))
      def optionalUintValue: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.uintValue)((c_, f_) => c_.copy(uintValue = f_))
      def sintValue: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getSintValue)((c_, f_) => c_.copy(sintValue = Some(f_)))
      def optionalSintValue: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.sintValue)((c_, f_) => c_.copy(sintValue = f_))
      def boolValue: com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getBoolValue)((c_, f_) => c_.copy(boolValue = Some(f_)))
      def optionalBoolValue: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.boolValue)((c_, f_) => c_.copy(boolValue = f_))
    }
    final val STRING_VALUE_FIELD_NUMBER = 1
    final val FLOAT_VALUE_FIELD_NUMBER = 2
    final val DOUBLE_VALUE_FIELD_NUMBER = 3
    final val INT_VALUE_FIELD_NUMBER = 4
    final val UINT_VALUE_FIELD_NUMBER = 5
    final val SINT_VALUE_FIELD_NUMBER = 6
    final val BOOL_VALUE_FIELD_NUMBER = 7
  }

  @SerialVersionUID(0L)
  final case class Feature(
      id: scala.Option[Long] = None,
      tags: Seq[Int] = Nil,
      `type`: scala.Option[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType] = None,
      geometry: Seq[Int] = Nil
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Feature] with com.trueaccord.lenses.Updatable[Feature] {
      private[this] def tagsSerializedSize = {
      if (__tagsSerializedSizeField == 0) __tagsSerializedSizeField =
        tags.map(com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag).sum
      __tagsSerializedSizeField
      }
      @transient private[this] var __tagsSerializedSizeField: Int = 0
      private[this] def geometrySerializedSize = {
      if (__geometrySerializedSizeField == 0) __geometrySerializedSizeField =
        geometry.map(com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag).sum
      __geometrySerializedSizeField
      }
      @transient private[this] var __geometrySerializedSizeField: Int = 0
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (id.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeUInt64Size(1, id.get) }
        if(tags.nonEmpty) {
          val __localsize = tagsSerializedSize
          __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        if (`type`.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, `type`.get.value) }
        if(geometry.nonEmpty) {
          val __localsize = geometrySerializedSize
          __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        id.foreach { __v =>
          output.writeUInt64(1, __v)
        };
        if (tags.nonEmpty) {
          output.writeTag(2, 2)
          output.writeUInt32NoTag(tagsSerializedSize)
          tags.foreach(output.writeUInt32NoTag)
        };
        `type`.foreach { __v =>
          output.writeEnum(3, __v.value)
        };
        if (geometry.nonEmpty) {
          output.writeTag(4, 2)
          output.writeUInt32NoTag(geometrySerializedSize)
          geometry.foreach(output.writeUInt32NoTag)
        };
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature = {
        var __id = this.id
        val __tags = (scala.collection.immutable.Vector.newBuilder[Int] ++= this.tags)
        var __type = this.`type`
        val __geometry = (scala.collection.immutable.Vector.newBuilder[Int] ++= this.geometry)
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __id = Some(__input.readUInt64())
            case 16 =>
              __tags += __input.readUInt32()
            case 18 => {
              val length = __input.readRawVarint32()
              val oldLimit = __input.pushLimit(length)
              while (__input.getBytesUntilLimit > 0) {
                __tags += __input.readUInt32
              }
              __input.popLimit(oldLimit)
            }
            case 24 =>
              __type = Some(geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType.fromValue(__input.readEnum()))
            case 32 =>
              __geometry += __input.readUInt32()
            case 34 => {
              val length = __input.readRawVarint32()
              val oldLimit = __input.pushLimit(length)
              while (__input.getBytesUntilLimit > 0) {
                __geometry += __input.readUInt32
              }
              __input.popLimit(oldLimit)
            }
            case tag => __input.skipField(tag)
          }
        }
        geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature(
            id = __id,
            tags = __tags.result(),
            `type` = __type,
            geometry = __geometry.result()
        )
      }
      def getId: Long = id.getOrElse(0L)
      def clearId: Feature = copy(id = None)
      def withId(__v: Long): Feature = copy(id = Some(__v))
      def clearTags = copy(tags = Seq.empty)
      def addTags(__vs: Int*): Feature = addAllTags(__vs)
      def addAllTags(__vs: TraversableOnce[Int]): Feature = copy(tags = tags ++ __vs)
      def withTags(__v: Seq[Int]): Feature = copy(tags = __v)
      def getType: geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType = `type`.getOrElse(geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType.UNKNOWN)
      def clearType: Feature = copy(`type` = None)
      def withType(__v: geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType): Feature = copy(`type` = Some(__v))
      def clearGeometry = copy(geometry = Seq.empty)
      def addGeometry(__vs: Int*): Feature = addAllGeometry(__vs)
      def addAllGeometry(__vs: TraversableOnce[Int]): Feature = copy(geometry = geometry ++ __vs)
      def withGeometry(__v: Seq[Int]): Feature = copy(geometry = __v)
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 1 => id.getOrElse(null)
          case 2 => tags
          case 3 => `type`.map(_.valueDescriptor).getOrElse(null)
          case 4 => geometry
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature
  }

  object Feature extends com.trueaccord.scalapb.GeneratedMessageCompanion[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature] = this
    def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[Seq[Int]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType.fromValue(__e.getNumber)),
        __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[Seq[Int]]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.descriptor.getNestedTypes.get(1)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
      __field.getNumber match {
        case 3 => geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType
      }
    }
    lazy val defaultInstance = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature(
    )
    implicit class FeatureLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature]) extends com.trueaccord.lenses.ObjectLens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature](_l) {
      def id: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getId)((c_, f_) => c_.copy(id = Some(f_)))
      def optionalId: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.id)((c_, f_) => c_.copy(id = f_))
      def tags: com.trueaccord.lenses.Lens[UpperPB, Seq[Int]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
      def `type`: com.trueaccord.lenses.Lens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType] = field(_.getType)((c_, f_) => c_.copy(`type` = Some(f_)))
      def optionalType: com.trueaccord.lenses.Lens[UpperPB, scala.Option[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.GeomType]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def geometry: com.trueaccord.lenses.Lens[UpperPB, Seq[Int]] = field(_.geometry)((c_, f_) => c_.copy(geometry = f_))
    }
    final val ID_FIELD_NUMBER = 1
    final val TAGS_FIELD_NUMBER = 2
    final val TYPE_FIELD_NUMBER = 3
    final val GEOMETRY_FIELD_NUMBER = 4
  }

  @SerialVersionUID(0L)
  final case class Layer(
      version: Int = 1,
      name: String = "",
      features: Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature] = Nil,
      keys: Seq[String] = Nil,
      values: Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value] = Nil,
      extent: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Layer] with com.trueaccord.lenses.Updatable[Layer] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(15, version)
        __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, name)
        features.foreach(features => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(features.serializedSize) + features.serializedSize)
        keys.foreach(keys => __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, keys))
        values.foreach(values => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(values.serializedSize) + values.serializedSize)
        if (extent.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(5, extent.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        output.writeString(1, name)
        features.foreach { __v =>
          output.writeTag(2, 2)
          output.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(output)
        };
        keys.foreach { __v =>
          output.writeString(3, __v)
        };
        values.foreach { __v =>
          output.writeTag(4, 2)
          output.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(output)
        };
        extent.foreach { __v =>
          output.writeUInt32(5, __v)
        };
        output.writeUInt32(15, version)
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer = {
        var __version = this.version
        var __name = this.name
        val __features = (scala.collection.immutable.Vector.newBuilder[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature] ++= this.features)
        val __keys = (scala.collection.immutable.Vector.newBuilder[String] ++= this.keys)
        val __values = (scala.collection.immutable.Vector.newBuilder[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value] ++= this.values)
        var __extent = this.extent
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 120 =>
              __version = __input.readUInt32()
            case 10 =>
              __name = __input.readString()
            case 18 =>
              __features += com.trueaccord.scalapb.LiteParser.readMessage(__input, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature.defaultInstance)
            case 26 =>
              __keys += __input.readString()
            case 34 =>
              __values += com.trueaccord.scalapb.LiteParser.readMessage(__input, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value.defaultInstance)
            case 40 =>
              __extent = Some(__input.readUInt32())
            case tag => __input.skipField(tag)
          }
        }
        geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer(
            version = __version,
            name = __name,
            features = __features.result(),
            keys = __keys.result(),
            values = __values.result(),
            extent = __extent
        )
      }
      def withVersion(__v: Int): Layer = copy(version = __v)
      def withName(__v: String): Layer = copy(name = __v)
      def clearFeatures = copy(features = Seq.empty)
      def addFeatures(__vs: geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature*): Layer = addAllFeatures(__vs)
      def addAllFeatures(__vs: TraversableOnce[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature]): Layer = copy(features = features ++ __vs)
      def withFeatures(__v: Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature]): Layer = copy(features = __v)
      def clearKeys = copy(keys = Seq.empty)
      def addKeys(__vs: String*): Layer = addAllKeys(__vs)
      def addAllKeys(__vs: TraversableOnce[String]): Layer = copy(keys = keys ++ __vs)
      def withKeys(__v: Seq[String]): Layer = copy(keys = __v)
      def clearValues = copy(values = Seq.empty)
      def addValues(__vs: geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value*): Layer = addAllValues(__vs)
      def addAllValues(__vs: TraversableOnce[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value]): Layer = copy(values = values ++ __vs)
      def withValues(__v: Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value]): Layer = copy(values = __v)
      def getExtent: Int = extent.getOrElse(4096)
      def clearExtent: Layer = copy(extent = None)
      def withExtent(__v: Int): Layer = copy(extent = Some(__v))
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 15 => version
          case 1 => name
          case 2 => features
          case 3 => keys
          case 4 => values
          case 5 => extent.getOrElse(null)
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer
  }

  object Layer extends com.trueaccord.scalapb.GeneratedMessageCompanion[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer] = this
    def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int],
        __fieldsMap(__fields.get(1)).asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature]],
        __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[Seq[String]],
        __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Int]]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.descriptor.getNestedTypes.get(2)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
      var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      __field.getNumber match {
        case 2 => __out = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature
        case 4 => __out = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value
      }
    __out
    }
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer(
      version = 1,
      name = ""
    )
    implicit class LayerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer]) extends com.trueaccord.lenses.ObjectLens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer](_l) {
      def version: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.version)((c_, f_) => c_.copy(version = f_))
      def name: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def features: com.trueaccord.lenses.Lens[UpperPB, Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Feature]] = field(_.features)((c_, f_) => c_.copy(features = f_))
      def keys: com.trueaccord.lenses.Lens[UpperPB, Seq[String]] = field(_.keys)((c_, f_) => c_.copy(keys = f_))
      def values: com.trueaccord.lenses.Lens[UpperPB, Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Value]] = field(_.values)((c_, f_) => c_.copy(values = f_))
      def extent: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getExtent)((c_, f_) => c_.copy(extent = Some(f_)))
      def optionalExtent: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.extent)((c_, f_) => c_.copy(extent = f_))
    }
    final val VERSION_FIELD_NUMBER = 15
    final val NAME_FIELD_NUMBER = 1
    final val FEATURES_FIELD_NUMBER = 2
    final val KEYS_FIELD_NUMBER = 3
    final val VALUES_FIELD_NUMBER = 4
    final val EXTENT_FIELD_NUMBER = 5
  }

  implicit class TileLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile]) extends com.trueaccord.lenses.ObjectLens[UpperPB, geotrellis.vectortile.protobuf.internal.vector_tile.Tile](_l) {
    def layers: com.trueaccord.lenses.Lens[UpperPB, Seq[geotrellis.vectortile.protobuf.internal.vector_tile.Tile.Layer]] = field(_.layers)((c_, f_) => c_.copy(layers = f_))
  }
  final val LAYERS_FIELD_NUMBER = 3
}
